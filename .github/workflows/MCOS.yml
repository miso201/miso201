name: DWAgent Installation for macOS

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch, adjust as necessary

jobs:
  install_dwagent:
    runs-on: macos-latest  # Ensure the runner is macOS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python (if required for your project)
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Download DWAgent Install Script
      run: |
        # Create the dwagent.sh script
        echo '#!/bin/sh' > dwagent.sh
        echo 'mkdir /var/tmp' >> dwagent.sh
        echo 'cd /var/tmp' >> dwagent.sh
        echo 'curl --location https://www.dwservice.net/download/dwagent_x86.dmg -o dwagent_x86.dmg' >> dwagent.sh
        echo 'hdiutil attach /var/tmp/dwagent_x86.dmg' >> dwagent.sh
        echo 'cp -r /Volumes/DWAgent/DWAgent.app /Applications/' >> dwagent.sh
        echo 'hdiutil detach /Volumes/DWAgent' >> dwagent.sh
        echo 'rm /var/tmp/dwagent_x86.dmg' >> dwagent.sh
        echo 'cd /Applications/DWAgent.app' >> dwagent.sh
        echo '/Applications/DWAgent.app/Contents/MacOS/extract' >> dwagent.sh
        echo 'chmod -R 755 /Applications/DWAgent.app' >> dwagent.sh
        echo 'sudo /Applications/DWAgent.app/Contents/MacOS/Install /Applications/DWAgent.app/ Y -silent key=xxx-xxx-xxx logpath=$HOME/Documents/install.log' >> dwagent.sh

    - name: Run DWAgent Install Script
      run: |
        sudo sh dwagent.sh

    - name: Capture Screenshot
      run: |
        screencapture -x screenshot.png  # Capture screenshot and save as screenshot.png

    - name: Install Python and Create Virtual Environment
      run: |
        brew install python  # Ensure Python is installed
        python3 -m venv venv  # Create a virtual environment
        source venv/bin/activate  # Activate the virtual environment

    - name: Install Python Dependencies
      run: |
        source venv/bin/activate  # Activate virtual environment
        pip install --upgrade pip  # Upgrade pip
        pip install requests  # Install required dependencies

    - name: Upload Screenshot to Gofile
      run: |
        source venv/bin/activate  # Ensure virtual environment is activated
        python3 - <<EOF
        import requests

        def upload_image_to_gofile(img_filename):
            url = 'https://store1.gofile.io/uploadFile'
            try:
                with open(img_filename, 'rb') as img_file:
                    files = {'file': img_file}
                    response = requests.post(url, files=files)
                    response.raise_for_status()  # Throws error for HTTP issues
                    result = response.json()

                    if result['status'] == 'ok':
                        download_page = result['data']['downloadPage']
                        with open('show.bat', 'a') as bat_file:
                            bat_file.write(f'\necho Avica Remote ID : {download_page}')
                        print(f"Image uploaded successfully! Download link: {download_page}")
                        return download_page
                    else:
                        print("Upload error:", result.get('status'))
                        return None
            except Exception as e:
                print(f"Failed to upload image: {e}")
                return None

        # Provide the correct path to your screenshot image
        image_path = 'screenshot.png'  # Path to the screenshot captured earlier
        download_link = upload_image_to_gofile(image_path)

        if download_link:
            print(f"Access your screenshot at: {download_link}")
        else:
            print("Failed to upload image.")
        EOF

    - name: Keep the job running
      run: sleep 999999  # Keep the workflow running indefinitely
