name: VNC and Ngrok Setup for macOS

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch, adjust as necessary

jobs:
  setup_vnc_ngrok:
    runs-on: macos-latest  # Ensure the runner is macOS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Homebrew and Dependencies
      run: |
        # Install Homebrew if it's not installed
        if ! command -v brew &>/dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        # Install VNC Viewer using Homebrew Cask
        brew install --cask tigervnc-viewer
        # Install Ngrok
        brew install ngrok

    - name: Setup Ngrok with Authtoken
      run: |
        # Install Ngrok and authenticate using the provided authtoken
        curl -s https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-darwin-amd64.zip -o ngrok.zip
        unzip ngrok.zip
        mv ngrok /usr/local/bin/
        ./ngrok authtoken 1UsQiVX5yamnqtOQlsFbdCQWaPO_6PkGezQvuw75sJu3HgY8Q
        # Start Ngrok to expose VNC server on port 5901
        nohup ./ngrok tcp 5901 &

    - name: Wait for Ngrok to start
      run: |
        sleep 5  # Wait for Ngrok to establish a tunnel

    - name: Open VNC Viewer and Capture Screenshot
      run: |
        # Capture screenshot of the VNC server window
        screencapture -x screenshot.png  # Capture screenshot and save as screenshot.png

    - name: Upload Screenshot to GoFile
      run: |
        python3 - <<EOF
        import requests

        def upload_image_to_gofile(img_filename):
            url = 'https://store1.gofile.io/uploadFile'
            try:
                with open(img_filename, 'rb') as img_file:
                    files = {'file': img_file}
                    response = requests.post(url, files=files)
                    response.raise_for_status()  # Throws error for HTTP issues
                    result = response.json()

                    if result['status'] == 'ok':
                        download_page = result['data']['downloadPage']
                        print(f"Image uploaded successfully! Download link: {download_page}")
                        return download_page
                    else:
                        print("Upload error:", result.get('status'))
                        return None
            except Exception as e:
                print(f"Failed to upload image: {e}")
                return None

        # Provide the correct path to your screenshot image
        image_path = 'screenshot.png'  # Path to the screenshot captured earlier
        download_link = upload_image_to_gofile(image_path)

        if download_link:
            print(f"Access your screenshot at: {download_link}")
        else:
            print("Failed to upload image.")
        EOF

    - name: Display Ngrok Public URL and Credentials
      run: |
        # Output Ngrok public URL and credentials
        echo ..........................................................
        echo IP:
        curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*' | sed 's/"public_url":"//'
        echo Username: runneradmin
        echo Password: P@ssw0rd!

    - name: Keep the job running
      run: sleep 999999  # Keep the workflow running indefinitely
