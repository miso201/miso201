name: RustDesk Automation with Password Change

on:
  push:
    branches:
      - main

jobs:
  install-and-upload:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Homebrew (if not installed)
      run: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        export PATH="/opt/homebrew/bin:$PATH"

    - name: Install RustDesk
      run: |
        brew install --cask rustdesk

    - name: Start RustDesk in background
      run: |
       /Applications/RustDesk.app/Contents/MacOS/RustDesk &

    - name: Set RustDesk Password
      run: |
        PASSWORD="PassW@rd$(date +%s)" # Generate a unique password
        CONFIG_PATH="$HOME/Library/Application Support/rustdesk/config.json"
        if [ -f "$CONFIG_PATH" ]; then
          jq ".password = \"$PASSWORD\"" "$CONFIG_PATH" > tmp.json && mv tmp.json "$CONFIG_PATH"
          echo "RustDesk password set to $PASSWORD"
        else
          echo "RustDesk configuration not found. Skipping password update."
        fi

    - name: Capture Screenshot
      run: screencapture -x screenshot.png

    - name: Install Python and Create Virtual Environment
      run: |
        brew install python
        python3 -m venv venv
        source venv/bin/activate

    - name: Install Python Dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install requests

    - name: Upload Screenshot to Gofile
      run: |
        source venv/bin/activate
        python3 - <<EOF
        import requests

        def upload_image_to_gofile(img_filename):
            url = 'https://store1.gofile.io/uploadFile'
            try:
                with open(img_filename, 'rb') as img_file:
                    files = {'file': img_file}
                    response = requests.post(url, files=files)
                    response.raise_for_status()
                    result = response.json()
                    if result['status'] == 'ok':
                        download_page = result['data']['downloadPage']
                        with open('show.bat', 'a') as bat_file:
                            bat_file.write(f'\necho Avica Remote ID [MCOS]: {download_page}')
                        print(f"Image uploaded successfully! Download link: {download_page}")
                        return download_page
                    else:
                        print("Upload error:", result.get('status'))
                        return None
            except Exception as e:
                print(f"Failed to upload image: {e}")
                return None

        image_path = 'screenshot.png'
        download_link = upload_image_to_gofile(image_path)

        if download_link:
            print(f"Access your screenshot at: {download_link}")
        else:
            print("Failed to upload image.")
        EOF

    - name: Keep the job running
      run: sleep 999999
